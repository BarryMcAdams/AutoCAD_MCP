"""
VBA Macro Generator for Master AutoCAD Coder.

Generates VBA (Visual Basic for Applications) code for AutoCAD automation
with focus on Excel integration and user interface creation.
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import re
import json


@dataclass
class VBAModule:
    """Represents a VBA module definition."""
    name: str
    module_type: str  # standard, class, userform
    description: str
    code_template: str
    dependencies: List[str]


class VBAGenerator:
    """Generates VBA code for AutoCAD automation and Excel integration."""
    
    def __init__(self):
        self.modules = self._initialize_modules()
        self.templates = self._initialize_templates()
        self.patterns = self._initialize_patterns()
        self.excel_functions = self._initialize_excel_functions()
    
    def _initialize_modules(self) -> Dict[str, VBAModule]:
        """Initialize common VBA module templates."""
        return {
            "autocad_basic": VBAModule(
                name="AutoCADBasic",
                module_type="standard",
                description="Basic AutoCAD automation functions",
                code_template="""' AutoCAD Basic Operations Module
' Generated by Master AutoCAD Coder

Option Explicit

' Global AutoCAD Application object
Dim acadApp As AcadApplication
Dim acadDoc As AcadDocument

' Initialize AutoCAD connection
Public Function ConnectToAutoCAD() As Boolean
    On Error GoTo ErrorHandler
    
    ' Try to get existing AutoCAD instance
    Set acadApp = GetObject(, "AutoCAD.Application")
    Set acadDoc = acadApp.ActiveDocument
    
    ConnectToAutoCAD = True
    Exit Function
    
ErrorHandler:
    ' Try to create new AutoCAD instance
    On Error GoTo FinalError
    Set acadApp = CreateObject("AutoCAD.Application")
    acadApp.Visible = True
    Set acadDoc = acadApp.ActiveDocument
    ConnectToAutoCAD = True
    Exit Function
    
FinalError:
    MsgBox "Failed to connect to AutoCAD: " & Err.Description
    ConnectToAutoCAD = False
End Function

' Draw a line in AutoCAD
Public Function DrawLine(startPoint As Variant, endPoint As Variant) As AcadLine
    On Error GoTo ErrorHandler
    
    If Not ConnectToAutoCAD() Then
        Set DrawLine = Nothing
        Exit Function
    End If
    
    Dim lineObj As AcadLine
    Set lineObj = acadDoc.ModelSpace.AddLine(startPoint, endPoint)
    acadDoc.Regen acActiveViewport
    
    Set DrawLine = lineObj
    Exit Function
    
ErrorHandler:
    MsgBox "Error drawing line: " & Err.Description
    Set DrawLine = Nothing
End Function

' Draw a circle in AutoCAD
Public Function DrawCircle(centerPoint As Variant, radius As Double) As AcadCircle
    On Error GoTo ErrorHandler
    
    If Not ConnectToAutoCAD() Then
        Set DrawCircle = Nothing
        Exit Function
    End If
    
    Dim circleObj As AcadCircle
    Set circleObj = acadDoc.ModelSpace.AddCircle(centerPoint, radius)
    acadDoc.Regen acActiveViewport
    
    Set DrawCircle = circleObj
    Exit Function
    
ErrorHandler:
    MsgBox "Error drawing circle: " & Err.Description
    Set DrawCircle = Nothing
End Function

' Get entity information
Public Function GetEntityInfo(entityObj As AcadEntity) As String
    On Error GoTo ErrorHandler
    
    Dim info As String
    info = "Entity Type: " & entityObj.ObjectName & vbCrLf
    info = info & "Layer: " & entityObj.Layer & vbCrLf
    info = info & "Color: " & entityObj.Color & vbCrLf
    
    ' Add specific properties based on entity type
    Select Case entityObj.ObjectName
        Case "AcDbLine"
            Dim lineObj As AcadLine
            Set lineObj = entityObj
            info = info & "Length: " & lineObj.Length & vbCrLf
        Case "AcDbCircle"
            Dim circleObj As AcadCircle
            Set circleObj = entityObj
            info = info & "Radius: " & circleObj.radius & vbCrLf
            info = info & "Area: " & circleObj.Area & vbCrLf
    End Select
    
    GetEntityInfo = info
    Exit Function
    
ErrorHandler:
    GetEntityInfo = "Error getting entity info: " & Err.Description
End Function""",
                dependencies=["AutoCAD Type Library"]
            ),
            
            "excel_integration": VBAModule(
                name="ExcelIntegration",
                module_type="standard", 
                description="Excel and AutoCAD integration functions",
                code_template="""' Excel Integration Module
' Generated by Master AutoCAD Coder

Option Explicit

' Import data from Excel to AutoCAD
Public Sub ImportFromExcel(filePath As String, Optional sheetName As String = "")
    On Error GoTo ErrorHandler
    
    Dim xlApp As Object
    Dim xlWorkbook As Object
    Dim xlWorksheet As Object
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long
    
    ' Connect to AutoCAD
    If Not ConnectToAutoCAD() Then Exit Sub
    
    ' Open Excel file
    Set xlApp = CreateObject("Excel.Application")
    Set xlWorkbook = xlApp.Workbooks.Open(filePath)
    
    ' Select worksheet
    If sheetName = "" Then
        Set xlWorksheet = xlWorkbook.ActiveSheet
    Else
        Set xlWorksheet = xlWorkbook.Worksheets(sheetName)
    End If
    
    ' Get data range
    lastRow = xlWorksheet.Cells(xlWorksheet.Rows.Count, 1).End(-4162).Row ' xlUp = -4162
    lastCol = xlWorksheet.Cells(1, xlWorksheet.Columns.Count).End(-4159).Column ' xlToLeft = -4159
    
    ' Process data (customize based on your needs)
    For i = 2 To lastRow ' Assuming row 1 has headers
        ProcessExcelRow xlWorksheet, i
    Next i
    
    ' Cleanup
    xlWorkbook.Close False
    xlApp.Quit
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
    MsgBox "Data imported successfully from " & filePath
    Exit Sub
    
ErrorHandler:
    MsgBox "Error importing from Excel: " & Err.Description
    ' Cleanup on error
    If Not xlWorkbook Is Nothing Then xlWorkbook.Close False
    If Not xlApp Is Nothing Then xlApp.Quit
End Sub

' Process individual Excel row
Private Sub ProcessExcelRow(ws As Object, rowNum As Long)
    On Error GoTo ErrorHandler
    
    ' Example: Read coordinates and create line
    ' Customize this based on your Excel data structure
    Dim x1 As Double, y1 As Double, z1 As Double
    Dim x2 As Double, y2 As Double, z2 As Double
    
    x1 = ws.Cells(rowNum, 1).Value
    y1 = ws.Cells(rowNum, 2).Value
    z1 = ws.Cells(rowNum, 3).Value
    x2 = ws.Cells(rowNum, 4).Value
    y2 = ws.Cells(rowNum, 5).Value
    z2 = ws.Cells(rowNum, 6).Value
    
    Dim startPoint(2) As Double
    Dim endPoint(2) As Double
    
    startPoint(0) = x1: startPoint(1) = y1: startPoint(2) = z1
    endPoint(0) = x2: endPoint(1) = y2: endPoint(2) = z2
    
    DrawLine startPoint, endPoint
    Exit Sub
    
ErrorHandler:
    Debug.Print "Error processing row " & rowNum & ": " & Err.Description
End Sub

' Export AutoCAD data to Excel
Public Sub ExportToExcel(filePath As String)
    On Error GoTo ErrorHandler
    
    Dim xlApp As Object
    Dim xlWorkbook As Object
    Dim xlWorksheet As Object
    Dim rowNum As Long
    Dim entity As AcadEntity
    
    ' Connect to AutoCAD
    If Not ConnectToAutoCAD() Then Exit Sub
    
    ' Create Excel application
    Set xlApp = CreateObject("Excel.Application")
    Set xlWorkbook = xlApp.Workbooks.Add
    Set xlWorksheet = xlWorkbook.ActiveSheet
    
    ' Set headers
    xlWorksheet.Cells(1, 1).Value = "Entity Type"
    xlWorksheet.Cells(1, 2).Value = "Layer"
    xlWorksheet.Cells(1, 3).Value = "Length/Radius"
    xlWorksheet.Cells(1, 4).Value = "Area"
    xlWorksheet.Cells(1, 5).Value = "Start X"
    xlWorksheet.Cells(1, 6).Value = "Start Y"
    xlWorksheet.Cells(1, 7).Value = "End X"
    xlWorksheet.Cells(1, 8).Value = "End Y"
    
    rowNum = 2
    
    ' Process each entity in model space
    For Each entity In acadDoc.ModelSpace
        ExportEntityToExcel xlWorksheet, entity, rowNum
        rowNum = rowNum + 1
    Next entity
    
    ' Save and close Excel file
    xlWorkbook.SaveAs filePath
    xlWorkbook.Close True
    xlApp.Quit
    
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
    MsgBox "Data exported successfully to " & filePath
    Exit Sub
    
ErrorHandler:
    MsgBox "Error exporting to Excel: " & Err.Description
    If Not xlWorkbook Is Nothing Then xlWorkbook.Close False
    If Not xlApp Is Nothing Then xlApp.Quit
End Sub

' Export individual entity to Excel
Private Sub ExportEntityToExcel(ws As Object, entity As AcadEntity, rowNum As Long)
    On Error Resume Next
    
    ws.Cells(rowNum, 1).Value = entity.ObjectName
    ws.Cells(rowNum, 2).Value = entity.Layer
    
    ' Add entity-specific data
    Select Case entity.ObjectName
        Case "AcDbLine"
            Dim lineObj As AcadLine
            Set lineObj = entity
            ws.Cells(rowNum, 3).Value = lineObj.Length
            ws.Cells(rowNum, 5).Value = lineObj.StartPoint(0)
            ws.Cells(rowNum, 6).Value = lineObj.StartPoint(1)
            ws.Cells(rowNum, 7).Value = lineObj.EndPoint(0)
            ws.Cells(rowNum, 8).Value = lineObj.EndPoint(1)
            
        Case "AcDbCircle"
            Dim circleObj As AcadCircle
            Set circleObj = entity
            ws.Cells(rowNum, 3).Value = circleObj.radius
            ws.Cells(rowNum, 4).Value = circleObj.Area
            ws.Cells(rowNum, 5).Value = circleObj.Center(0)
            ws.Cells(rowNum, 6).Value = circleObj.Center(1)
    End Select
End Sub""",
                dependencies=["AutoCAD Type Library", "Microsoft Excel Object Library"]
            ),
            
            "user_interface": VBAModule(
                name="UserInterface",
                module_type="userform",
                description="User interface for AutoCAD automation",
                code_template="""' User Interface Module
' Generated by Master AutoCAD Coder

Option Explicit

' Main form for AutoCAD operations
' This would typically be a UserForm with controls

' Form load event
Private Sub UserForm_Initialize()
    ' Initialize form controls
    Me.Caption = "AutoCAD Automation Tool"
    
    ' Set up combo boxes, list boxes, etc.
    InitializeControls
End Sub

' Initialize form controls
Private Sub InitializeControls()
    ' Example: Populate layer list
    PopulateLayerList
    
    ' Set default values
    SetDefaultValues
End Sub

' Populate layer list from AutoCAD
Private Sub PopulateLayerList()
    On Error GoTo ErrorHandler
    
    If Not ConnectToAutoCAD() Then Exit Sub
    
    Dim layer As AcadLayer
    
    ' Clear existing items
    ' lstLayers.Clear ' Assuming you have a ListBox named lstLayers
    
    ' Add layers from AutoCAD
    For Each layer In acadDoc.Layers
        ' lstLayers.AddItem layer.Name
    Next layer
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error populating layer list: " & Err.Description
End Sub

' Set default form values
Private Sub SetDefaultValues()
    ' Set default coordinate values
    ' txtStartX.Value = "0"
    ' txtStartY.Value = "0"
    ' txtStartZ.Value = "0"
End Sub

' Button click event for drawing line
Private Sub btnDrawLine_Click()
    On Error GoTo ErrorHandler
    
    ' Get values from form controls
    ' Dim startPoint(2) As Double
    ' Dim endPoint(2) As Double
    
    ' startPoint(0) = CDbl(txtStartX.Value)
    ' startPoint(1) = CDbl(txtStartY.Value)
    ' startPoint(2) = CDbl(txtStartZ.Value)
    ' endPoint(0) = CDbl(txtEndX.Value)
    ' endPoint(1) = CDbl(txtEndY.Value)
    ' endPoint(2) = CDbl(txtEndZ.Value)
    
    ' Draw the line
    ' If Not DrawLine(startPoint, endPoint) Is Nothing Then
    '     MsgBox "Line drawn successfully!"
    ' End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error drawing line: " & Err.Description
End Sub

' Button click event for drawing circle
Private Sub btnDrawCircle_Click()
    On Error GoTo ErrorHandler
    
    ' Get values from form controls
    ' Dim centerPoint(2) As Double
    ' Dim radius As Double
    
    ' centerPoint(0) = CDbl(txtCenterX.Value)
    ' centerPoint(1) = CDbl(txtCenterY.Value)
    ' centerPoint(2) = CDbl(txtCenterZ.Value)
    ' radius = CDbl(txtRadius.Value)
    
    ' Draw the circle
    ' If Not DrawCircle(centerPoint, radius) Is Nothing Then
    '     MsgBox "Circle drawn successfully!"
    ' End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error drawing circle: " & Err.Description
End Sub

' Button click event for Excel import
Private Sub btnImportExcel_Click()
    On Error GoTo ErrorHandler
    
    ' Show file dialog to select Excel file
    Dim filePath As String
    ' filePath = Application.GetOpenFilename("Excel Files (*.xlsx),*.xlsx")
    
    ' If filePath <> "False" Then
    '     ImportFromExcel filePath
    ' End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error importing Excel file: " & Err.Description
End Sub""",
                dependencies=["AutoCAD Type Library", "Microsoft Excel Object Library"]
            )
        }
    
    def _initialize_templates(self) -> Dict[str, str]:
        """Initialize VBA code templates."""
        return {
            "basic_macro": """' {macro_name}
' {description}
' Generated by Master AutoCAD Coder

Option Explicit

Sub {macro_name}()
    On Error GoTo ErrorHandler
    
    {macro_body}
    
    MsgBox "Macro completed successfully!"
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in {macro_name}: " & Err.Description
End Sub""",
            
            "function_template": """' {function_name}
' {description}
' Generated by Master AutoCAD Coder

Option Explicit

{function_type} Function {function_name}({parameters}) As {return_type}
    On Error GoTo ErrorHandler
    
    {function_body}
    
    Exit Function
    
ErrorHandler:
    {error_handling}
    {function_name} = {error_return_value}
End Function""",
            
            "class_module": """' {class_name} Class Module
' {description}
' Generated by Master AutoCAD Coder

Option Explicit

{class_variables}

{class_methods}""",
            
            "excel_automation": """' Excel Automation Template
' {description}
' Generated by Master AutoCAD Coder

Option Explicit

Sub {macro_name}()
    On Error GoTo ErrorHandler
    
    Dim xlApp As Object
    Dim xlWorkbook As Object
    Dim xlWorksheet As Object
    
    ' Create Excel application
    Set xlApp = CreateObject("Excel.Application")
    xlApp.Visible = True
    
    {excel_operations}
    
    ' Cleanup
    Set xlWorksheet = Nothing
    Set xlWorkbook = Nothing
    xlApp.Quit
    Set xlApp = Nothing
    
    MsgBox "Excel automation completed!"
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in Excel automation: " & Err.Description
    ' Cleanup on error
    If Not xlApp Is Nothing Then
        xlApp.Quit
        Set xlApp = Nothing
    End If
End Sub"""
        }
    
    def _initialize_patterns(self) -> Dict[str, Dict[str, Any]]:
        """Initialize pattern recognition for VBA generation."""
        return {
            "excel_operations": {
                "keywords": ["excel", "spreadsheet", "import", "export", "data"],
                "template": "excel_automation",
                "module_type": "excel_integration"
            },
            "ui_operations": {
                "keywords": ["form", "dialog", "user", "interface", "input"],
                "template": "class_module",
                "module_type": "user_interface"
            },
            "autocad_operations": {
                "keywords": ["draw", "create", "autocad", "line", "circle"],
                "template": "basic_macro",
                "module_type": "autocad_basic"
            },
            "automation_workflows": {
                "keywords": ["automate", "batch", "process", "workflow"],
                "template": "function_template",
                "module_type": "autocad_basic"
            }
        }
    
    def _initialize_excel_functions(self) -> Dict[str, str]:
        """Initialize Excel-specific VBA functions."""
        return {
            "read_cell": 'xlWorksheet.Cells({row}, {col}).Value',
            "write_cell": 'xlWorksheet.Cells({row}, {col}).Value = {value}',
            "get_range": 'xlWorksheet.Range("{range}")',
            "last_row": 'xlWorksheet.Cells(xlWorksheet.Rows.Count, {col}).End(-4162).Row',
            "last_col": 'xlWorksheet.Cells({row}, xlWorksheet.Columns.Count).End(-4159).Column',
            "open_workbook": 'xlApp.Workbooks.Open("{filepath}")',
            "save_workbook": 'xlWorkbook.SaveAs "{filepath}"',
            "close_workbook": 'xlWorkbook.Close {save_changes}'
        }
    
    def generate_code(self, description: str, complexity: str = "basic", 
                     target_host: str = "autocad") -> Dict[str, Any]:
        """Generate VBA code from natural language description."""
        # Parse the description
        parsed = self._parse_description(description)
        
        # Determine the appropriate approach
        if "excel" in description.lower() or target_host == "excel":
            return self._generate_excel_integration(parsed, complexity)
        elif any(ui_word in description.lower() for ui_word in ["form", "dialog", "interface"]):
            return self._generate_user_interface(parsed, complexity)
        elif any(auto_word in description.lower() for auto_word in ["batch", "automate", "process"]):
            return self._generate_automation_workflow(parsed, complexity)
        else:
            return self._generate_basic_macro(parsed, complexity)
    
    def _parse_description(self, description: str) -> Dict[str, Any]:
        """Parse natural language description into structured data."""
        desc_lower = description.lower()
        
        # Identify operation types
        operations = []
        for pattern_name, pattern_info in self.patterns.items():
            if any(keyword in desc_lower for keyword in pattern_info["keywords"]):
                operations.append(pattern_name.replace("_operations", ""))
        
        # Extract entities and objects
        entities = []
        entity_keywords = ["line", "circle", "polyline", "text", "block", "dimension"]
        for entity in entity_keywords:
            if entity in desc_lower:
                entities.append(entity)
        
        # Extract file references
        file_refs = re.findall(r'\\b\\w+\\.(?:xlsx?|xlsm|csv)\\b', description)
        
        # Extract macro/function name
        macro_name = self._extract_macro_name(description)
        
        # Determine requirements
        requires_excel = "excel" in desc_lower or any(f.endswith(('.xlsx', '.xls', '.xlsm')) for f in file_refs)
        requires_ui = any(word in desc_lower for word in ["form", "dialog", "interface", "user"])
        requires_automation = any(word in desc_lower for word in ["batch", "automate", "process"])
        
        return {
            "operations": operations,
            "entities": entities,
            "file_references": file_refs,
            "macro_name": macro_name,
            "description": description,
            "requires_excel": requires_excel,
            "requires_ui": requires_ui,
            "requires_automation": requires_automation
        }
    
    def _extract_macro_name(self, description: str) -> str:
        """Extract or generate appropriate macro name."""
        # Try to find explicit macro name
        macro_match = re.search(r'macro\\s+(?:called\\s+)?["\']?(\\w+)["\']?', description.lower())
        if macro_match:
            return macro_match.group(1)
        
        # Generate from key actions
        desc_lower = description.lower()
        if "import" in desc_lower and "excel" in desc_lower:
            return "ImportFromExcel"
        elif "export" in desc_lower and "excel" in desc_lower:
            return "ExportToExcel"
        elif "draw line" in desc_lower:
            return "DrawLine"
        elif "draw circle" in desc_lower:  
            return "DrawCircle"
        elif "batch" in desc_lower:
            return "BatchProcess"
        else:
            # Generate generic name
            words = re.findall(r'\\b\\w+\\b', desc_lower)
            return ''.join(word.capitalize() for word in words[:2] if len(word) > 2)
    
    def _generate_basic_macro(self, parsed: Dict[str, Any], complexity: str) -> Dict[str, Any]:
        """Generate basic VBA macro."""
        macro_name = parsed["macro_name"]
        
        # Generate macro body based on entities
        macro_body = self._generate_macro_body(parsed)
        
        code = self.templates["basic_macro"].format(
            macro_name=macro_name,
            description=parsed["description"],
            macro_body=macro_body
        )
        
        return {
            "code": code,
            "language": "vba",
            "macro_name": macro_name,
            "module_type": "standard",
            "description": f"VBA macro for {parsed['description']}",
            "target_host": "autocad",
            "dependencies": ["AutoCAD Type Library"],
            "usage_instructions": [
                "Open AutoCAD VBA Editor (Alt+F11)",
                "Insert a new module",
                "Paste this code into the module",
                f"Run the macro by typing '{macro_name}' in VBA or calling it from AutoCAD"
            ]
        }
    
    def _generate_macro_body(self, parsed: Dict[str, Any]) -> str:
        """Generate the main body of a VBA macro."""
        body_lines = [
            "' Connect to AutoCAD",
            "If Not ConnectToAutoCAD() Then Exit Sub",
            ""
        ]
        
        # Add entity-specific operations
        for entity in parsed["entities"]:
            if entity == "line":
                body_lines.extend([
                    "' Draw a line",
                    "Dim startPoint(2) As Double",
                    "Dim endPoint(2) As Double",
                    "startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0",
                    "endPoint(0) = 100: endPoint(1) = 100: endPoint(2) = 0",
                    "DrawLine startPoint, endPoint",
                    ""
                ])
            elif entity == "circle":
                body_lines.extend([
                    "' Draw a circle", 
                    "Dim centerPoint(2) As Double",
                    "Dim radius As Double",
                    "centerPoint(0) = 50: centerPoint(1) = 50: centerPoint(2) = 0",
                    "radius = 25",
                    "DrawCircle centerPoint, radius",
                    ""
                ])
        
        if not parsed["entities"]:
            body_lines.extend([
                "' Add your AutoCAD automation code here",
                "' Example: DrawLine startPoint, endPoint",
                "' Example: DrawCircle centerPoint, radius"
            ])
        
        return "\\n    ".join(body_lines)
    
    def _generate_excel_integration(self, parsed: Dict[str, Any], complexity: str) -> Dict[str, Any]:
        """Generate Excel integration VBA code."""
        macro_name = parsed["macro_name"]
        
        # Determine Excel operations
        if "import" in parsed["description"].lower():
            excel_ops = self._generate_excel_import_operations(parsed)
        elif "export" in parsed["description"].lower():
            excel_ops = self._generate_excel_export_operations(parsed)
        else:
            excel_ops = self._generate_general_excel_operations(parsed)
        
        code = self.templates["excel_automation"].format(
            macro_name=macro_name,
            description=parsed["description"],
            excel_operations=excel_ops
        )
        
        return {
            "code": code,
            "language": "vba",
            "macro_name": macro_name,
            "module_type": "standard",
            "description": f"VBA Excel integration for {parsed['description']}",
            "target_host": "autocad",
            "dependencies": ["AutoCAD Type Library", "Microsoft Excel Object Library"],
            "usage_instructions": [
                "Ensure Excel is installed on the system",
                "Add reference to Microsoft Excel Object Library in VBA Editor",
                "Open AutoCAD VBA Editor and paste this code",
                f"Run the macro '{macro_name}' from AutoCAD or VBA Editor"
            ]
        }
    
    def _generate_excel_import_operations(self, parsed: Dict[str, Any]) -> str:
        """Generate Excel import operations."""
        file_path = parsed["file_references"][0] if parsed["file_references"] else "C:\\\\Data\\\\input.xlsx"
        
        return f"""    ' Open Excel workbook
    Set xlWorkbook = xlApp.Workbooks.Open("{file_path}")
    Set xlWorksheet = xlWorkbook.ActiveSheet
    
    ' Connect to AutoCAD
    If Not ConnectToAutoCAD() Then
        xlWorkbook.Close False
        Exit Sub
    End If
    
    ' Get data range
    Dim lastRow As Long
    Dim lastCol As Long
    lastRow = xlWorksheet.Cells(xlWorksheet.Rows.Count, 1).End(-4162).Row
    lastCol = xlWorksheet.Cells(1, xlWorksheet.Columns.Count).End(-4159).Column
    
    ' Process each row of data
    Dim i As Long
    For i = 2 To lastRow ' Assuming row 1 has headers
        ProcessDataRow xlWorksheet, i
    Next i
    
    ' Close Excel workbook
    xlWorkbook.Close False"""
    
    def _generate_excel_export_operations(self, parsed: Dict[str, Any]) -> str:
        """Generate Excel export operations."""
        return """    ' Create new Excel workbook
    Set xlWorkbook = xlApp.Workbooks.Add
    Set xlWorksheet = xlWorkbook.ActiveSheet
    
    ' Connect to AutoCAD
    If Not ConnectToAutoCAD() Then
        xlWorkbook.Close False
        Exit Sub
    End If
    
    ' Set up headers
    xlWorksheet.Cells(1, 1).Value = "Entity Type"
    xlWorksheet.Cells(1, 2).Value = "Layer"
    xlWorksheet.Cells(1, 3).Value = "Properties"
    
    ' Export AutoCAD entities
    Dim entity As AcadEntity
    Dim rowNum As Long
    rowNum = 2
    
    For Each entity In acadDoc.ModelSpace
        ExportEntityData xlWorksheet, entity, rowNum
        rowNum = rowNum + 1
    Next entity
    
    ' Save the workbook
    xlWorkbook.SaveAs "C:\\\\Export\\\\AutoCAD_Data.xlsx"
    xlWorkbook.Close True"""
    
    def _generate_general_excel_operations(self, parsed: Dict[str, Any]) -> str:
        """Generate general Excel operations."""
        return """    ' Create or open Excel workbook
    Set xlWorkbook = xlApp.Workbooks.Add
    Set xlWorksheet = xlWorkbook.ActiveSheet
    
    ' Your Excel operations here
    ' Examples:
    ' xlWorksheet.Cells(1, 1).Value = "Data"
    ' xlWorksheet.Range("A1:C3").Select
    
    ' Save the workbook
    xlWorkbook.SaveAs "C:\\\\Output\\\\Result.xlsx"
    xlWorkbook.Close True"""
    
    def _generate_user_interface(self, parsed: Dict[str, Any], complexity: str) -> Dict[str, Any]:
        """Generate user interface VBA code."""
        class_name = parsed["macro_name"] + "Form"
        
        # Generate class variables
        class_vars = """' Form controls and variables
Private WithEvents cmdOK As CommandButton
Private WithEvents cmdCancel As CommandButton
Private txtInput As TextBox
Private lblPrompt As Label"""
        
        # Generate class methods
        class_methods = """' Form initialization
Private Sub UserForm_Initialize()
    Me.Caption = "AutoCAD Input Form"
    InitializeControls
End Sub

' Initialize form controls
Private Sub InitializeControls()
    ' Set up form layout and controls
    ' Add your control setup code here
End Sub

' OK button click event
Private Sub cmdOK_Click()
    ' Process form input
    ProcessFormInput
    Me.Hide
End Sub

' Cancel button click event
Private Sub cmdCancel_Click()
    Me.Hide
End Sub

' Process form input
Private Sub ProcessFormInput()
    ' Get input values and execute AutoCAD operations
    ' Add your processing logic here
End Sub"""
        
        code = self.templates["class_module"].format(
            class_name=class_name,
            description=f"User interface form for {parsed['description']}",
            class_variables=class_vars,
            class_methods=class_methods
        )
        
        return {
            "code": code,
            "language": "vba",
            "class_name": class_name,
            "module_type": "userform",
            "description": f"VBA UserForm for {parsed['description']}",
            "target_host": "autocad",
            "dependencies": ["AutoCAD Type Library"],
            "usage_instructions": [
                "In VBA Editor, insert a UserForm",
                "Add controls (buttons, text boxes, labels) to the form",
                "Replace the form's code with this generated code",
                "Customize the InitializeControls and ProcessFormInput methods",
                "Show the form using: UserForm1.Show"
            ]
        }
    
    def _generate_automation_workflow(self, parsed: Dict[str, Any], complexity: str) -> Dict[str, Any]:
        """Generate automation workflow VBA code."""
        function_name = parsed["macro_name"]
        
        function_body = """    ' Initialize progress tracking
    Dim totalItems As Long
    Dim processedItems As Long
    totalItems = GetTotalItemsToProcess()
    processedItems = 0
    
    ' Connect to AutoCAD
    If Not ConnectToAutoCAD() Then
        {function_name} = False
        Exit Function
    End If
    
    ' Process items in batch
    Dim i As Long
    For i = 1 To totalItems
        If ProcessSingleItem(i) Then
            processedItems = processedItems + 1
        End If
        
        ' Update progress
        UpdateProgress processedItems, totalItems
    Next i
    
    ' Return success status
    {function_name} = (processedItems = totalItems)""".format(function_name=function_name)
        
        error_handling = f"""MsgBox "Error in automation: " & Err.Description
    {function_name} = False"""
        
        code = self.templates["function_template"].format(
            function_name=function_name,
            description=parsed["description"],
            function_type="Public",
            parameters="",
            return_type="Boolean",
            function_body=function_body,
            error_handling=error_handling,
            error_return_value="False"
        )
        
        return {
            "code": code,
            "language": "vba",
            "function_name": function_name,
            "module_type": "standard",
            "description": f"VBA automation workflow for {parsed['description']}",
            "target_host": "autocad",
            "dependencies": ["AutoCAD Type Library"],
            "usage_instructions": [
                "Add this function to a VBA module",
                "Implement the helper functions: GetTotalItemsToProcess, ProcessSingleItem, UpdateProgress",
                f"Call the function: result = {function_name}()",
                "Check the return value for success/failure status"
            ]
        }
    
    def get_module_library(self) -> Dict[str, Any]:
        """Get available VBA module templates."""
        return {
            "modules": {
                name: {
                    "name": module.name,
                    "type": module.module_type,
                    "description": module.description,
                    "dependencies": module.dependencies
                }
                for name, module in self.modules.items()
            },
            "templates": list(self.templates.keys()),
            "patterns": list(self.patterns.keys()),
            "excel_functions": list(self.excel_functions.keys())
        }
    
    def validate_vba_code(self, code: str) -> Dict[str, Any]:
        """Basic VBA code validation."""
        issues = []
        suggestions = []
        
        # Check for basic VBA structure
        if "Option Explicit" not in code:
            suggestions.append("Add 'Option Explicit' at the top for better variable handling")
        
        # Check for error handling
        if "On Error GoTo" not in code and "On Error Resume Next" not in code:
            suggestions.append("Add error handling with 'On Error GoTo ErrorHandler'")
        
        # Check for AutoCAD connection
        if "ConnectToAutoCAD" not in code and "acadApp" not in code:
            issues.append("No AutoCAD connection code found")
        
        # Check for proper cleanup
        if "Set " in code and "Nothing" not in code:
            suggestions.append("Set object variables to Nothing for proper cleanup")
        
        # Check for Excel integration
        if "Excel.Application" in code:
            if "xlApp.Quit" not in code:
                issues.append("Excel application not properly closed")
            if "Microsoft Excel Object Library" not in code:
                suggestions.append("Add reference to Microsoft Excel Object Library")
        
        return {
            "valid": len(issues) == 0,
            "issues": issues,
            "suggestions": suggestions,
            "quality_score": max(0, 100 - len(issues) * 25 - len(suggestions) * 5)
        }
    
    def generate_complete_solution(self, description: str, complexity: str = "intermediate") -> Dict[str, Any]:
        """Generate a complete VBA solution with all necessary modules."""
        parsed = self._parse_description(description)
        
        modules = {}
        main_code = None
        
        # Always include basic AutoCAD module
        modules["AutoCADBasic"] = self.modules["autocad_basic"]
        
        # Add Excel integration if needed
        if parsed["requires_excel"]:
            modules["ExcelIntegration"] = self.modules["excel_integration"]
        
        # Add user interface if needed
        if parsed["requires_ui"]:
            modules["UserInterface"] = self.modules["user_interface"]
        
        # Generate main code
        main_code = self.generate_code(description, complexity)
        
        return {
            "main_code": main_code,
            "supporting_modules": {
                name: {"code": module.code_template, "type": module.module_type}
                for name, module in modules.items()
            },
            "installation_instructions": [
                "Open AutoCAD VBA Editor (Alt+F11)",
                "For each supporting module:",
                "  - Insert new module (standard) or UserForm (userform)",
                "  - Paste the module code",
                "Add main code to a new standard module",
                "Add required references in Tools > References",
                "Save the VBA project"
            ],
            "dependencies": list(set(dep for module in modules.values() for dep in module.dependencies)),
            "complexity": complexity
        }