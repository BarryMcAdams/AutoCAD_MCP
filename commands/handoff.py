#!/usr/bin/env python3
"""
Simple session handoff script.

Creates session_handoff.md with information about the current session.
"""

import os
import json
import subprocess
from pathlib import Path
from datetime import datetime


def find_project_root() -> str:
    """Find project root by looking for project markers."""
    current_path = Path(__file__).resolve().parent
    
    project_markers = [
        '.git',
        'CLAUDE.md', 
        'PROJECT_TRACKER.md',
        'pyproject.toml',
        'src'
    ]
    
    max_levels = 10
    for _ in range(max_levels):
        for marker in project_markers:
            marker_path = current_path / marker
            if marker_path.exists():
                return str(current_path)
        
        parent = current_path.parent
        if parent == current_path:
            break
        current_path = parent
    
    return os.getcwd()


def get_git_info(project_root: str) -> dict:
    """Get current git information."""
    try:
        # Get current branch
        branch_result = subprocess.run(['git', 'branch', '--show-current'], 
                                     capture_output=True, text=True, cwd=project_root)
        current_branch = branch_result.stdout.strip() if branch_result.returncode == 0 else 'unknown'
        
        # Get recent commits
        log_result = subprocess.run(['git', 'log', '--oneline', '-3'], 
                                   capture_output=True, text=True, cwd=project_root)
        recent_commits = log_result.stdout.strip() if log_result.returncode == 0 else 'unknown'
        
        # Get git status
        status_result = subprocess.run(['git', 'status', '--porcelain'], 
                                      capture_output=True, text=True, cwd=project_root)
        git_status = status_result.stdout.strip() if status_result.returncode == 0 else 'unknown'
        
        return {
            'current_branch': current_branch,
            'recent_commits': recent_commits,
            'status': git_status
        }
    except Exception:
        return {
            'current_branch': 'unknown',
            'recent_commits': 'unknown',
            'status': 'unknown'
        }


def get_working_directory_info() -> dict:
    """Get current working directory information."""
    cwd = os.getcwd()
    try:
        files = os.listdir(cwd)
        file_count = len([f for f in files if os.path.isfile(os.path.join(cwd, f))])
        dir_count = len([f for f in files if os.path.isdir(os.path.join(cwd, f))])
        
        return {
            'path': cwd,
            'file_count': file_count,
            'dir_count': dir_count
        }
    except Exception:
        return {
            'path': cwd,
            'file_count': 'unknown',
            'dir_count': 'unknown'
        }


def create_session_handoff(project_root: str) -> str:
    """
    Create session handoff markdown content.
    """
    timestamp = datetime.now().isoformat()
    
    # Get git information
    git_info = get_git_info(project_root)
    
    # Get working directory information
    wd_info = get_working_directory_info()
    
    # Create handoff content
    content = []
    content.append("# Session Handoff")
    content.append("")
    content.append(f"**Handoff Timestamp**: {timestamp}")
    content.append(f"**Working Directory**: {wd_info['path']}")
    content.append(f"**Current Branch**: {git_info['current_branch']}")
    content.append("")
    content.append("## Git Status")
    content.append("```")
    content.append(git_info['status'] if git_info['status'] else "Working tree clean")
    content.append("```")
    content.append("")
    content.append("## Recent Commits")
    content.append("```")
    content.append(git_info['recent_commits'])
    content.append("```")
    content.append("")
    content.append("## Working Directory Stats")
    content.append(f"- Files: {wd_info['file_count']}")
    content.append(f"- Directories: {wd_info['dir_count']}")
    content.append("")
    content.append("---")
    content.append(f"*Generated by handoff.py at {timestamp}*")
    
    return "\n".join(content)


def main():
    """
    Main entry point - creates session handoff.
    """
    project_root = find_project_root()
    print(f"Creating session handoff for: {project_root}")
    
    # Create handoff content
    handoff_content = create_session_handoff(project_root)
    
    # Write to file
    handoff_path = os.path.join(project_root, 'session_handoff.md')
    try:
        with open(handoff_path, 'w', encoding='utf-8') as f:
            f.write(handoff_content)
        
        print(f"Session handoff created: {handoff_path}")
        
        # Show summary
        lines = handoff_content.split('\n')
        for line in lines[:10]:  # Show first 10 lines
            if line.strip():
                print(f"  {line}")
        
        print("  ...")
        
    except Exception as e:
        print(f"Failed to create session handoff: {str(e)}")
        return 1
    
    print(f"\nSession handoff complete at {datetime.now().isoformat()}")
    return 0


if __name__ == "__main__":
    exit(main())